library(tidyverse)
# for CATEGORICAL VAR
ggplot(data = diamonds)+
geom_bar(mapping = aes(x=cut))  # remember, default geom, default stat. for bar it is count
# for CONTINUOUS VAR
ggplot(data=diamonds)+
geom_histogram(mapping = aes(x=carat), binwidth = 0.5) # try adjusting the bindwidth here, what does it do?
# for CONTINUOUS VAR
ggplot(data=diamonds)+
geom_histogram(mapping = aes(x=carat), binwidth = 0.1) # try adjusting the bindwidth here, what does it do?
dplyer::filter()
dplyer::lag()
small<-diamonds%>%
filter(carat < 3)
small<-diamonds%>%
filter(carat < 3)
ggplot(data = small, aes(carat))+
geom_histogram(binwidth = 0.01)    # what do you notice with this plot? any clustering??
ggplot(diamonds)+
geom_histogram(aes(x=y), binwidth=0.5)
ggplot(diamonds)+
geom_histogram(aes(x=y), binwidth = 0.5)+
coord_cartesian(ylim=c(0,50))
ggplot(diamonds, aes(price))+
geom_histogram()
weird<-diamonds%>%
filter(price>17000)
View(weird)
#looking at values that look weird
weird<-diamonds%>%
filter(price>17000)
diamonds2<-diamonds%>%
mutate(y = ifelse(y<3 | y>20, NA, y))
View(weird)
View(diamonds2)
View(diamonds2)
look<-filter(diamonds2, is.na(y))
View(diamonds2)
View(look)
ggplot(data=diamonds, aes(x=cut, y=price))+
geom_boxplot()
ggplot(data=diamonds, aes(x=cut, y=price))+
geom_violin()
ggplot(data=diamonds, aes(x=price, color=cut))+
geom_freqpoly()
ggplot(data=diamonds)+
geom_count(aes(x=cut, y=color))
diamonds%>%
count(color, cut)%>%
ggplot(aes(x=color, y=cut))+
geom_tile(aes(fill=n))
diamonds%>%
count(color, cut)%>%
ggplot(aes(y=color, x=cut))+
geom_tile(aes(fill=n))
ggplot(data=diamonds)+
geom_point(aes(x=carat, y=price))
geom_point(aes(x=carat, y=price, colour=cut)
ggplot(data=diamonds)+
geom_point(aes(x=carat, y=price, colour=cut))
ggplot(data=diamonds)+
geom_point(aes(x=carat, y=price, colour=cut))
ggplot(data=small, aes(x=carat, y=price))+
geom_boxplot(aes(group=cut_width(carat, 0.1)))
ggplot(data=small, aes(x=carat, y=price))+
geom_boxplot(aes(group=cut_width(carat, 0.1)), varwidth = T)
